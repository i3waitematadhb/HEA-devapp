<?php

namespace {

    use Sheadawson\DependentDropdown\Forms\DependentDropdownField;
    use Sheadawson\DependentDropdown\Forms\DependentListboxField;
    use SilverStripe\AssetAdmin\Forms\UploadField;
    use SilverStripe\Assets\Image;
    use SilverStripe\Forms\CheckboxField;
    use SilverStripe\Forms\DropdownField;
    use SilverStripe\Forms\GridField\GridField;
    use SilverStripe\Forms\GridField\GridFieldConfig_RecordEditor;
    use SilverStripe\Forms\HiddenField;
    use SilverStripe\Forms\HTMLEditor\HTMLEditorField;
    use SilverStripe\Forms\TextareaField;
    use SilverStripe\Forms\TextField;
    use SilverStripe\ORM\DataObject;
    use UndefinedOffset\SortableGridField\Forms\GridFieldSortableRows;

    class EventJudge extends DataObject
    {
        private static $default_sort  = 'Sort';

        private static $singular_name = "Event Judge";
        private static $plural_name = "Event Judges";

        private static $db = [
            'Name'     => 'Text',
            'Position' => 'Text',
            'Blurb'    => 'Text',
            'Note'     => 'HTMLText',
            'Width'    => 'Varchar',
            'Archived' => 'Boolean',
            'Sort'     => 'Int',
        ];

        private static $has_one = [
            'Image'         => Image::class,
            'EventYear'     => EventYear::class
        ];

        private static $has_many = [
            'JudgeHistories'  => JudgeHistory::class
        ];

        private static $many_many = [
            'Categories' => CategoryHistory::class,
        ];

        private static $owns = [
            'Image'
        ];

        private static $summary_fields = [
            'Name',
            'Position',
            'Image.CMSThumbnail'    => 'Profile Image',
            'ReadableEventCategory' => 'Assigned Categories',
            'ReadableEventYear'     => 'Event Year',
            'Status'
        ];

        public function getCMSFields()
        {
            $fields = parent::getCMSFields(); // TODO: Change the autogenerated stub
            $fields->addFieldToTab('Root.Main', TextField::create('Name'));
            $fields->addFieldToTab('Root.Main', UploadField::create('Image')->setFolderName('Judges/Photos'));
            $fields->addFieldToTab('Root.Main', TextField::create('Position'));
            $fields->addFieldToTab('Root.Main', TextareaField::create('Blurb'));
            $fields->removeByName("Categories");
            $fields->addFieldToTab('Root.Note', HTMLEditorField::create('Note')
                ->setDescription('Additional information for judges or a note if there are no judges on the category'));
            $fields->addFieldToTab('Root.Width', DropdownField::create('Width', 'Width',
                array(
                    'col-lg-2' => '16%',
                    'col-lg-3' => '25%',
                    'col-lg-4' => '33%',
                    'col-lg-5' => '41%',
                    'col-lg-6' => '50%',
                    'col-lg-7' => '58%',
                    'col-lg-8' => '66%',
                    'col-lg-9' => '75%',
                    'col-lg-10' => '83%',
                    'col-lg-11' => '91%',
                    'col-lg-12' => '100%',
                )
            ));

            $fields->addFieldToTab('Root.Main', $eventYear = DropdownField::create('EventYearID', 'Event year',
                EventYear::get()->filter('Archived', false)->map('ID','Name')));

            $categorySource = function($val) {
                $eventYear = EventYear::get()->byID($val);
                return CategoryHistory::get()->filter(['Archived' => false, "EventYear" => $eventYear->Name])->map('ID','Name');
            };

            $fields->addFieldToTab('Root.Main', DependentListboxField::create('Categories', 'Event categories',
                $categorySource)->setDepends($eventYear));

            $fields->addFieldToTab('Root.Main', CheckboxField::create('Archived'));
            $fields->addFieldToTab('Root.Main', HiddenField::create('Sort'));

            $fields->removeByName("EventCategories");

            $config = GridFieldConfig_RecordEditor::create('999');
            if ($this->JudgeHistories()->Count()) {
                $config->addComponent(new GridFieldSortableRows('Sort'));
            }

            $editor = GridField::create('JudgeHistories', 'Judge history', $this->JudgeHistories(), $config);
            $fields->addFieldToTab('Root.JudgeHistories', $editor);

            return $fields;
        }

        protected function onAfterWrite()
        {
            parent::onAfterWrite(); // TODO: Change the autogenerated stub

            $id = $this->ID;
            $isHistoryExist = JudgeHistory::get();
            $categories = $this->owner->Categories();
            foreach($categories as $category) {
                if (!$isHistoryExist->filter([
                        'Name' => $this->Name,
                        'AssignedCategory' => $category->Name,
                        'EventYear' => $this->getReadableEventYear()
                    ])->first()) {
                    $history = new JudgeHistory();
                    $history->Name = $this->Name;
                    $history->AssignedCategory = $category->Name;
                    $history->EventYear = $this->getReadableEventYear();
                    $history->JudgeID   = $id;
                    $history->write();
                }
            }
        }

        public function getReadableEventCategory()
        {
            $categories = $this->owner->Categories();
            $categoryConcat = '';
            foreach($categories as $key => $category) {
                if ($key > 0) {
                    $categoryConcat .= ', ';
                }
                $categoryConcat .= $category->Name;
            }
            return $categoryConcat;
        }

        public function getReadableEventYear()
        {
            return $this->EventYear()->Name;
        }

        public function getStatus()
        {
            if($this->Archived == 1) return _t('GridField.Archived', 'Archived');
            return _t('GridField.Live', 'Live');
        }
    }
}
