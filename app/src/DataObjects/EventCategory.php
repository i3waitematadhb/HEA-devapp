<?php

namespace {

    use SilverStripe\Forms\CheckboxField;
    use SilverStripe\Forms\DropdownField;
    use SilverStripe\Forms\HiddenField;
    use SilverStripe\Forms\HTMLEditor\HTMLEditorField;
    use SilverStripe\Forms\TextField;
    use SilverStripe\ORM\DataObject;
    use SilverStripe\Security\Permission;

    class EventCategory extends DataObject
    {
        private static $default_sort  = 'Sort';

        private static $singular_name = "Category";
        private static $plural_name = "Categories";

        private static $db = [
            'Name'     => 'Text',
            'Content'  => 'HTMLText',
            'Archived' => 'Boolean',
            'Sort'     => 'Int',
        ];

        private static $has_one = [
            'EventYear' => EventYear::class,
        ];

        private static $belongs_many_many = [
            'EventJudge' => EventJudge::class
        ];

        private static $summary_fields = [
            'Name',
            'ReadableEventYear' => 'Year',
            'Status'
        ];

        public function getCMSFields()
        {
            $fields = parent::getCMSFields(); // TODO: Change the autogenerated stub
            $fields->addFieldToTab('Root.Main', TextField::create('Name'));
            $fields->addFieldToTab('Root.Main', DropdownField::create('EventYearID', 'Event year',
                EventYear::get()->filter('Archived', false)->map('ID','Name')));
            $fields->addFieldToTab('Root.Main', HTMLEditorField::create('Content'));
            $fields->addFieldToTab('Root.Main', CheckboxField::create('Archived'));
            $fields->addFieldToTab('Root.Main', HiddenField::create('Sort'));

            return $fields;
        }

        protected function onAfterWrite()
        {
            parent::onAfterWrite(); // TODO: Change the autogenerated stub

            $id = $this->ID;
            $category = CategoryHistory::get()->filter(['Name' => $this->Name, 'EventYear' => $this->getReadableEventYear()]);
            $history = new CategoryHistory();
            if ($category->exists()) {
                $history->Name = $this->Name;
                $history->EventYear = $this->getReadableEventYear();
                $history->Content   = $this->Content;
                $history->Category  = $id;
                $history->ID = $category->first()->ID;
            } else {
                $history->Name = $this->Name;
                $history->EventYear = $this->getReadableEventYear();
                $history->Content   = $this->Content;
                $history->Category  = $id;
            }
            $history->write();
        }

        public function getReadableEventYear()
        {
            return $this->EventYear()->Name;
        }

        public function getStatus()
        {
            if($this->Archived == 1) return _t('GridField.Archived', 'Archived');
            return _t('GridField.Live', 'Live');
        }

        public function canView($member = null)
        {
            return Permission::check('CMS_ACCESS_CMSMain', 'any', $member);
        }

        public function canEdit($member = null)
        {
            return Permission::check('CMS_ACCESS_CMSMain', 'any', $member);
        }

        public function canDelete($member = null)
        {
            return Permission::check('CMS_ACCESS_CMSMain', 'any', $member);
        }

        public function canCreate($member = null, $context = [])
        {
            return Permission::check('CMS_ACCESS_CMSMain', 'any', $member);
        }
    }
}
